# -*- coding: utf-8 -*-
"""timeseries.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Dn469YTcwql1EUsvDT1pv61TO8BA-ABm

Dataset : Madrid weather dataset hourly 2019-2022

link dataset : https://www.kaggle.com/datasets/rober2598/madrid-weather-dataset-by-hours-20192022
"""

#import library
import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf

#mount google drive
from google.colab import drive
drive.mount('/content/drive')

#mengekstrak file dari google drive
!unzip "/content/drive/MyDrive/machine learning/archive.zip" -d "/content/drive/MyDrive/machine learning/madridWeather"

#mengubah dataset menjadi dataframe
import pandas as pd
df = pd.read_csv("/content/drive/MyDrive/machine learning/madridWeather/weather_madrid_2019-2022.csv")
df.head()

#cek nilai null
df.isnull().sum()

df.info()

#mengubah formate time ke date 
df['time']=pd.to_datetime(df['time'])
df['time'].head()

#mengambil kolom time & temperature
df = df[['time','temperature' ]]
df.head()

df.info()

#menghapus waktu yang ada di kolom time,ubah judul jadi date
madrid=df[['time','temperature']].copy()
madrid['date'] = madrid['time'].dt.date

madridfinal=madrid.drop('time',axis=1)
madridfinal.set_index('date', inplace= True)
madridfinal.head()

#membuat plot
dates = df['time'].values
temp  = df['temperature'].values
 
 
plt.figure(figsize=(15,5))
plt.plot(dates, temp)
plt.title('Temperature di Madrid',
          fontsize=20);

#mengubah data menjadi format yang dapat diterima oleh model
def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

#split dataset untuk data train sebesar 80% & validation set sebesar 20%
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(temp, dates, test_size = 0.2, shuffle = False )

print('Total Data Train : ',len(x_train))
print('Total Data Validation : ',len(x_test))

#model dengan sequential
train_set = windowed_dataset(x_train, window_size=60, batch_size=100, shuffle_buffer=1000)
val_set = windowed_dataset(x_test, window_size=60, batch_size=100, shuffle_buffer=1000)

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(60, return_sequences=True),
  tf.keras.layers.LSTM(60),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])

#menghitung nilai 10% MAE
threshold_mae = (temp.max() - temp.min()) * 10/100
threshold_mae

#membuat callback
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')< threshold_mae):
      self.model.stop_training = True
      print("\nMAE sudah kurang dari 10%")
callbacks = myCallback()

#melatih model
optimizer = tf.keras.optimizers.SGD(lr=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])
history = model.fit(train_set, epochs=100, validation_data = val_set, callbacks=[callbacks])

# Plot Akurasi Model MAE
plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('Akurasi Model MAE')
plt.ylabel('mae')
plt.xlabel('epoch')
plt.legend(['latih', 'test'], loc='upper right')
plt.show()

# Plot Loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['latih', 'test'], loc='upper right')
plt.show()